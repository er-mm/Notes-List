{"version":3,"sources":["utils/myLogger.js","actions/todoActions.js","actions/types.js","components/FetchBooksList.js","components/AddUpdateBook.js","components/ErrorBoundary.js","components/MenuBar.js","reducers/bookReducer.js","reducers/index.js","store.js","components/LearningRedux.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["log","data","console","deleteBook","deleteBookID","dispatch","fetch","method","headers","then","res","json","type","payload","containsBook","book","updateBook","bookDetails","bookID","body","JSON","stringify","bookData","FetchBooksList","editBook","e","props","editBookDetails","check","item","this","fetchBooksList","nextProps","booksList","books","Array","length","Set","filter","searchNote","name","includes","sort","a","b","difference","Date","fullDate","getTime","map","className","onClick","key","id","containBook","addedDate","_","isEmpty","editBookList","React","Component","connect","state","bookStore","AddUpdateBook","change","event","preventDefault","today","date","getFullYear","getMonth","getDate","time","getHours","getMinutes","getSeconds","dateAndtime","target","value","setState","onChange","autoFocus","placeholder","editableBook","ErrorBoundary","hasError","errorName","errorMessage","error","errorInfo","message","errorDetails","stack","componentStack","children","Fragment","MenuBar","onSubmitOrUpdate","alert","addBook","searchCriteria","searchNotes","align","submitUpdateBook","debounceTimeout","note","initialState","combineReducers","action","updatedData","forEach","push","Object","assign","middleware","thunk","store","createStore","combineReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","LearningRedux","Header","Link","to","App","style","height","role","aria-valuenow","aria-valuemin","aria-valuemax","width","Route","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.9c4eef1f.chunk.js","sourcesContent":["export const log = data => {\r\n    console.log(\"*--*--*--*--*--*--*--*--*\");\r\n    console.log(data);\r\n  };\r\n  ","import { FETCH_BOOKS, CREATE_BOOK, DELETE_BOOK, EDIT_BOOK, UPDATE_BOOK, CONTAIN_BOOK, SEARCH_NOTE } from './types';\r\nimport { log } from \"../utils/myLogger\";\r\n\r\n// each action is a function that is to be exported\r\n//ES6\r\nexport const fetchBooksList = () => dispatch => {\r\n    log(' Action -> fetching book list-->');\r\n    fetch(' http://localhost:3000/books')\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: FETCH_BOOKS,\r\n            payload: data\r\n        }));\r\n}\r\n\r\nexport const addBook = bookDetails => dispatch => {\r\n    log('Action -> Adding Book -- bookDetails');\r\n    log(bookDetails);\r\n    fetch(' http://localhost:3000/books', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(bookDetails)\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: CREATE_BOOK,\r\n            payload: data\r\n        }));\r\n\r\n}\r\n\r\nexport const deleteBook = deleteBookID => dispatch => {\r\n    log('Action -> deleting Book');\r\n    fetch(' http://localhost:3000/books/' + deleteBookID, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Content-type': 'application/json'\r\n        },\r\n    })\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: DELETE_BOOK,\r\n            payload: deleteBookID\r\n        }));\r\n\r\n}\r\n\r\nexport const editBookDetails = book => dispatch => {\r\n    log('Action -> edit Book');\r\n    dispatch({\r\n        type: EDIT_BOOK,\r\n        payload: book\r\n    });\r\n\r\n}\r\n\r\nexport const containsBook = book => dispatch => {\r\n    log('Action -> edit Book');\r\n    dispatch({\r\n        type: CONTAIN_BOOK,\r\n        payload: book\r\n    });\r\n\r\n}\r\n\r\nexport const searchNotes = note => dispatch => {\r\n    log('Action -> Search Note');\r\n    dispatch({\r\n        type: SEARCH_NOTE,\r\n        payload: note\r\n    });\r\n\r\n}\r\n\r\nexport const updateBook = (bookDetails, bookID) => dispatch => {\r\n    log('Action -> updating -- bookDetails');\r\n    log(bookDetails);\r\n    fetch(' http://localhost:3000/books/' + bookID, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(bookDetails)\r\n    })\r\n        .then(res => res.json())\r\n        .then(bookData => dispatch({\r\n            type: UPDATE_BOOK,\r\n            payload: { bookData, bookID }\r\n        }));\r\n}\r\n","export const FETCH_BOOKS = 'FETCH_BOOKS';\r\nexport const CREATE_BOOK = 'CREATE_BOOK';\r\nexport const DELETE_BOOK = 'DELETE_BOOK';\r\nexport const EDIT_BOOK = 'EDIT_BOOK';\r\nexport const UPDATE_BOOK = 'UPDATE_BOOK';\r\nexport const CONTAIN_BOOK = 'CONTAIN_BOOK';\r\nexport const SEARCH_NOTE = 'SEARCH_NOTE';","import React from \"react\";\r\n\r\nimport { connect } from 'react-redux'; // it connects component to redux store that is provided by the provider component\r\n// we have to call the action alsowhich is fetchTodo\r\nimport { fetchBooksList, deleteBook, editBookDetails, containsBook } from '../actions/todoActions';\r\nimport { log } from \"../utils/myLogger\";\r\nimport _ from 'lodash';\r\nclass FetchBooksList extends React.Component {\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.fetchBooksList();\r\n\t}\r\n\r\n\tcomponentWillReceiveProps(nextProps) {\r\n\t\t// when it will receive a new property from state it will run\r\n\t\tlog('next props in Fetch post Fetch book list---->');\r\n\t\tlog(nextProps);\r\n\t\t// if (!_.isEmpty(nextProps.book) && !!nextProps.book.name) {\r\n\t\t// \tthis.props.books.unshift(nextProps.book);\r\n\t\t// }\r\n\t}\r\n\r\n\teditBook = (e, book) => {\r\n\t\tlog('details of edit book-->');\r\n\t\tlog(book);\r\n\t\tthis.props.editBookDetails(book)\r\n\t}\r\n\tcheck = (e, item) => {\r\n\t\tthis.props.containsBook(item);\r\n\t}\r\n\r\n\trender() {\r\n\t\tlog('in renderrrrr');\r\n\t\tlog(this.props);\r\n\t\tconst booksList = this.props.books instanceof Array\r\n\t\t\t? this.props.books.length\r\n\t\t\t\t? [...new Set(this.props.books)].filter((book) => {\r\n\t\t\t\t\treturn this.props.searchNote ? book.name.includes(this.props.searchNote) : book;\r\n\t\t\t\t}).sort((a, b) => {\r\n\t\t\t\t\tconst difference = new Date(b.fullDate).getTime() - new Date(a.fullDate).getTime();\r\n\t\t\t\t\treturn difference === 0 ? 0 : difference > 0 ? 1 : -1;\r\n\t\t\t\t}).map(item => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div className=\"list-group-item list-group-item-action\" onClick={(e) => this.check(e, item)}>\r\n\t\t\t\t\t\t\t<div key={item.id}>\r\n\t\t\t\t\t\t\t\t<h3>{this.props?.containBook?.id === item.id ? `${this.props.containBook.name}` : `${item.name}`}</h3>\r\n\t\t\t\t\t\t\t\t<h5>{`Added on: ${item.addedDate}`}</h5>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t\t: !_.isEmpty(this.props.containBook) && !this.props.containBook.id\r\n\t\t\t\t\t? (<></>)\r\n\t\t\t\t\t: (\r\n\t\t\t\t\t\t<div className=\"form-group shadow p-3 mb-5 bg-white rounded\">\r\n\t\t\t\t\t\t\tNo Notes. Please add\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t)\r\n\t\t\t: (\r\n\t\t\t\t<div className=\"form-group shadow p-3 mb-5 bg-white rounded\">\r\n\t\t\t\t\tBook are not the instance of Array or Array length seems to be zero\r\n\t\t\t\t\tPlease check dbJSON connection.\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\r\n\t\tconst editBookList = !_.isEmpty(this.props.containBook) && !this.props.containBook.id\r\n\t\t\t? (<>\r\n\t\t\t\t<div className=\"list-group-item list-group-item-action\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<h3>{`${this.props.containBook.name}`}</h3>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</>)\r\n\t\t\t: (<></>);\r\n\t\treturn (\r\n\t\t\t<div className=\"list-group\" >\r\n\t\t\t\t{editBookList}\r\n\t\t\t\t{booksList}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\tbooks: state.bookStore.books,\r\n\tbook: state.bookStore.book,\r\n\tsearchNote: state.bookStore.searchNote,\r\n\tcontainBook: state.bookStore.containBook,\r\n})\r\n\r\nexport default connect(mapStateToProps, { fetchBooksList, deleteBook, editBookDetails, containsBook })(FetchBooksList);\r\n","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { updateBook, containsBook } from '../actions/todoActions';\r\nimport { log } from \"../utils/myLogger\";\r\nimport _ from 'lodash';\r\n\r\nclass AddUpdateBook extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n        }\r\n    }\r\n\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        // when it will receive a new property from state it will run\r\n        log('next props-> in createpost--->');\r\n        log(nextProps);\r\n        if (!_.isEmpty(nextProps.containBook)) {\r\n            log('next props-> in ifff--->');\r\n            this.setState({\r\n                name: nextProps.containBook.name,\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                name: '',\r\n            });\r\n        }\r\n    }\r\n\r\n    change = (event) => {\r\n        event.preventDefault();\r\n        log('in text change--->');\r\n        log(this.props.containBook)\r\n        const today = new Date();\r\n        const date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n        const time = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\r\n        const dateAndtime = `${date} ${time}`;\r\n        const book = this.props.containBook;\r\n        this.props.containsBook({ ...book, name: event.target.value, addedDate: dateAndtime, fullDate: today })\r\n    }\r\n\r\n    render() {\r\n        log('props are');\r\n        log(this.props);\r\n        return (\r\n            <div className=\"container\">\r\n                <form className=\"table p-3 mb-2 bg-light text-dark\">\r\n                    <div>\r\n                        <div className=\"form-group\">\r\n                            <input type=\"text\" className=\"form-control\" id=\"name\" value={this.state.name} name=\"name\" onChange={this.change} autoFocus placeholder=\"Enter Note\" />\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    editableBook: state.bookStore.editableBook,\r\n    containBook: state.bookStore.containBook,\r\n    books: state.bookStore.books,\r\n})\r\n\r\nexport default connect(mapStateToProps, { updateBook, containsBook })(AddUpdateBook);","import React from \"react\";\r\nimport { log } from \"../utils/myLogger\";\r\n\r\nexport class ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false,\r\n        };\r\n        this.errorName = '';\r\n        this.errorMessage = '';\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({ hasError: true });\r\n        this.errorName = `Error Name:  ${error.name}`;\r\n        this.errorMessage = `Error Message: ${error.message}`;\r\n        const errorDetails = `\r\n        Error Name:  ${error.name}\r\n        Error Message: ${error.message}\r\n\t\tStack Trace: ${error.stack}\r\n\t\tComponent Stack: ${errorInfo.componentStack}\r\n\t\t`;\r\n        log(errorDetails);\r\n    }\r\n\r\n    render() {\r\n        const { hasError } = this.state;\r\n        const { children } = this.props;\r\n    return <React.Fragment>{hasError ? <div> {`Error occurred`} {<br/>} {this.errorName} {<br/>} {this.errorMessage} </div> : children}</React.Fragment>;\r\n    }\r\n}","import React from \"react\";\r\nimport { log } from \"../utils/myLogger\";\r\nimport { connect } from 'react-redux';\r\nimport { addBook, deleteBook, updateBook, searchNotes, containsBook } from '../actions/todoActions';\r\nimport _ from 'lodash';\r\nimport { DebounceInput } from 'react-debounce-input';\r\n\r\nclass MenuBar extends React.Component {\r\n\r\n    onSubmitOrUpdate = () => {\r\n        log('on clicking save');\r\n        log(this.props);\r\n        this.props.containBook.id\r\n            ? this.props.updateBook(this.props.containBook, this.props.containBook.id)\r\n            : !_.isEmpty(this.props.containBook)\r\n                ? this.props.addBook(this.props.containBook)\r\n                : alert('Enter book name First');\r\n        this.props.containsBook({})\r\n    }\r\n\r\n    deleteBook = () => {\r\n        log('details of deleted book-->');\r\n        log(this.props.containBook);\r\n        this.props.deleteBook(this.props.containBook.id);\r\n        this.props.containsBook({})\r\n    }\r\n\r\n    change = (event) => {\r\n        log('in search change- event.target.value is-->');\r\n        log(event.target.value);\r\n        const searchCriteria = event.target.value;\r\n\r\n        this.props.searchNotes(searchCriteria);\r\n    }\r\n\r\n    render() {\r\n        log('props in MenuBar');\r\n        log(this.props);\r\n        return (\r\n            <div className=\"container\" align=\"center\">\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td><button type=\"submit\" className=\"btn btn-primary\" onClick={this.onSubmitOrUpdate}>{this.props.submitUpdateBook}</button></td>\r\n                            <td><button type=\"submit\" className=\"btn btn-primary\" onClick={this.deleteBook}>{`Delete Note`}</button></td>\r\n                            {/* <td><input type=\"text\" className=\"form-control\" id=\"name\" name=\"name\" onChange={this.change} autoFocus placeholder=\"Search Naote\" /></td> */}\r\n                            <td>\r\n                                <DebounceInput\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    debounceTimeout={300}\r\n                                    onChange={this.change}\r\n                                    placeholder=\"Search Naote\"\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    submitUpdateBook: state.bookStore.submitUpdateBook,\r\n    containBook: state.bookStore.containBook\r\n})\r\n\r\nexport default connect(mapStateToProps, { addBook, updateBook, containsBook, deleteBook, searchNotes })(MenuBar)","// going to evaluate actions that are committed\r\n// actions such as fetching, creating a new todo\r\n// foractions we create types : basically constants\r\n\r\nimport { FETCH_BOOKS, CREATE_BOOK, DELETE_BOOK, EDIT_BOOK, UPDATE_BOOK, CONTAIN_BOOK, SEARCH_NOTE } from '../actions/types'\r\nimport { log } from \"../utils/myLogger\";\r\n\r\nconst initialState = {\r\n    books: [],\r\n    book: {},\r\n    editableBook: {},\r\n    submitUpdateBook: 'Save',\r\n    containBook: {},\r\n    searchNote: ''\r\n};\r\n\r\n// function evaluate that what type we going to deal with\r\n// takes two things - initialstate and action type\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case FETCH_BOOKS:\r\n            log('in reducer -> FETCH All Books');\r\n            return { // return current state and add items from action.payload\r\n                ...state,\r\n                books: action.payload //now we have to implement this in our component (FtechPosts)\r\n            }\r\n        case CREATE_BOOK:\r\n            log('in reducer -> ADD Book');\r\n            log(state);\r\n            log(action.payload);\r\n            return {\r\n                ...state,\r\n                book: action.payload,\r\n                books: [...state.books, action.payload]\r\n            };\r\n        case DELETE_BOOK:\r\n            log('in reducer -> DELETE Book');\r\n            return {\r\n                ...state,\r\n                books: state.books.filter((book) => book.id !== action.payload)\r\n            };\r\n        case EDIT_BOOK:\r\n            log('in reducer -> EDIT Book');\r\n            return {\r\n                ...state,\r\n                editableBook: action.payload\r\n            };\r\n        case CONTAIN_BOOK:\r\n            log('in reducer -> CONTAIN_BOOK');\r\n            return {\r\n                ...state,\r\n                containBook: action.payload\r\n            };\r\n        case SEARCH_NOTE:\r\n            log('in reducer -> SEARCH_NOTE');\r\n            return {\r\n                ...state,\r\n                searchNote: action.payload\r\n            };\r\n        case UPDATE_BOOK:\r\n            log('in reducer -> UPDATE Book');\r\n            const updatedData = [];\r\n            state.books.forEach(book => {\r\n                if (book.id === action.payload.bookID) updatedData.push(Object.assign(book, action.payload.bookData))\r\n                else updatedData.push(book);\r\n            })\r\n            return {\r\n                ...state,\r\n                books: updatedData\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport bookReducer from \"./bookReducer\";\r\n\r\n\r\nexport default combineReducers({\r\n\tbookStore: bookReducer\r\n});","import { createStore, applyMiddleware, compose } from \"redux\";\r\n// import {createLogger} from \"redux-logger\";\r\nimport combineReducer from './reducers';\r\nimport thunk from 'redux-thunk';\r\n\r\n//creating store with state object\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n\tcombineReducer,\r\n\tinitialState,\r\n\tcompose(\r\n\t\tapplyMiddleware(...middleware),\r\n\t\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n\t)\r\n\t);\r\n\r\nexport default store;","import React from \"react\";\r\nimport { Provider } from 'react-redux';\r\nimport FetchBooksList from './FetchBooksList';\r\nimport AddUpdateBook from './AddUpdateBook';\r\nimport { log } from \"../utils/myLogger\";\r\nimport { ErrorBoundary } from './ErrorBoundary';\r\nimport MenuBar from './MenuBar';\r\n\r\nimport store from '../store';\r\n\r\nexport class LearningRedux extends React.Component {\r\n\t// Provider : Makes the Redux store available to the connect() calls in the component hierarchy below.\r\n\trender() {\r\n\t\tlog('store---');\r\n\t\tlog(store);\r\n\t\treturn (\r\n\t\t\t<ErrorBoundary>\r\n\t\t\t\t<Provider store={store}>\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<MenuBar />\r\n\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t<div className=\"col-sm-6\">\r\n\t\t\t\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\t\t\t\t<FetchBooksList />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-sm-6\">\r\n\t\t\t\t\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t\t\t\t\t<AddUpdateBook />\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</>\r\n\t\t\t\t</Provider>\r\n\t\t\t</ErrorBoundary>\r\n\t\t);\r\n\t}\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport function Header() {\r\n    return (\r\n        <div className=\"container\" align=\"center\">\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <td><Link to=\"/learningRedux\" className=\"btn btn-primary\">Library</Link></td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport { LearningRedux } from \"./components/LearningRedux\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { Header } from \"./components/Header\";\n\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<br />\n\t\t\t\t\t<Header />\n\t\t\t\t\t<br />\n\t\t\t\t\t<div className=\"progress\" style={{ height: \"1px\" }} >\n\t\t\t\t\t\t<div className=\"progress-bar \" role=\"progressbar\" aria-valuenow=\"75\" aria-valuemin=\"0\" aria-valuemax=\"100\" style={{ width: \"100%\" }}>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div align=\"center\"><h6>Created By : MM</h6></div>\n\t\t\t\t\t<div className=\"progress\">\n\t\t\t\t\t\t<div className=\"progress-bar progress-bar-striped progress-bar-animated\" role=\"progressbar\" aria-valuenow=\"75\" aria-valuemin=\"0\" aria-valuemax=\"100\" style={{ width: \"100%\" }}>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<br />\n\t\t\t\t\t<div>\n\t\t\t\t\t <Route path=\"/learningRedux\" component={LearningRedux} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}